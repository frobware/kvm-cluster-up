#!/bin/bash

set -eu

THISDIR="$(cd $(dirname "${BASH_SOURCE[0]}") && pwd -P)"
source $THISDIR/common.sh

# This will generate a openstack-style config drive image suitable for
# use with cloud-init.  You may optionally pass in an ssh public key
# (using the -k/--ssh-key option) and a user-data blob (using the
# -u/--user-data option).

usage () {
	echo "usage: ${0##*/}: [--ssh-key <pubkey>] [--user-data <file>] [--hostname <hostname>] [--domainname <domainname> ] <imagename>"
}

ARGS=$(getopt \
	-o k:u:h:d: \
	--long help,hostname:,domainname:,ssh-key:,user-data: -n ${0##*/} \
	-- "$@")

if [ $? -ne 0 ]; then
	usage >&2
	exit 2
fi

eval set -- "$ARGS"

while :; do
	case "$1" in
		--help)
			usage
			exit 0
			;;
		-k|--ssh-key)
			ssh_key="$2"
			shift 2
			;;
		-u|--user-data)
			user_data="$2"
			shift 2
			;;
		-h|--hostname)
			hostname="$2"
			shift 2
			;;
		-d|--domainname)
			domainname="$2"
			shift 2
			;;
		--)	shift
			break
			;;
	esac
done

config_image=$1
shift

if [ -z "$config_image" ]; then
	echo "The imagename argument must be specified!" >&2
	usage >&2
	exit 3
fi

if [ $# -ne 0 ]; then
	echo "This command requires exactly one positional argument!" >&2
	usage >&2
	exit 4
fi

if [ "$ssh_key" ] && [ -f "$ssh_key" ]; then
	echo "adding pubkey from $ssh_key"
	ssh_key_data=$(cat "$ssh_key")
fi

uuid=$(uuidgen)
if ! [ "$hostname" ]; then
	hostname="$uuid"
fi

trap 'rm -rf $config_dir' EXIT
config_dir=$(mktemp -t -d configXXXXXX)

if [ "$user_data" ] && [ -f "$user_data" ]; then
	echo "adding user data from $user_data"
	cp $user_data $config_dir/user-data
else
	touch $config_dir/user-data
fi

sed -i \
    -e "s/@@KUP_CLOUD_USERNAME@@/$KUP_CLOUD_USERNAME/g" \
    $config_dir/user-data

sed -e "s/@@DOMAINNAME@@/$domainname/g" \
    -e "s/@@HOSTNAME@@/$hostname/g" \
    -e "s/@@KUP_CLOUD_USERNAME@@/$KUP_CLOUD_USERNAME/g" \
    -e "s/@@IID-UUID@@/iid-${uuid}/g" \
    $THISDIR/meta-data > $config_dir/meta-data

if [ "$ssh_key_data" ]; then
	sed -i \
	    -e "s,@@SSH_KEY_DATA@@,$ssh_key_data,g" \
	    $config_dir/user-data
	cat >> $config_dir/meta-data <<-EOF
	public-keys:
	  - |
	    $ssh_key_data
	EOF
fi

echo "generating configuration image at $config_image"
if ! mkisofs -o "$config_image" -V cidata -r -J --quiet $config_dir; then
	echo "ERROR: failed to create $config_image" >&2
	exit 1
fi
chmod a+r "$config_image"
